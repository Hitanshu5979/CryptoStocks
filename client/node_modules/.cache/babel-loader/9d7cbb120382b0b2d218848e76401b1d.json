{"ast":null,"code":"import _classCallCheck from \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/src/components/Stocks/StockPrice_MSFT.js\";\nimport React from \"react\";\nimport Plot from 'react-plotly.js';\nimport './StocksPrice.css';\n\nvar StockPrice_MSFT = /*#__PURE__*/function (_React$Component) {\n  _inherits(StockPrice_MSFT, _React$Component);\n\n  function StockPrice_MSFT(props) {\n    var _this;\n\n    _classCallCheck(this, StockPrice_MSFT);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StockPrice_MSFT).call(this, props));\n    _this.state = {\n      stockChartXValues: [],\n      stockChartYValues: []\n    }; //Binding method\n\n    _this.onBuyClick = _this.onBuyClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(StockPrice_MSFT, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchStock();\n    }\n  }, {\n    key: \"fetchStock\",\n    value: function fetchStock() {\n      var pointerToThis = this;\n      console.log(pointerToThis);\n      var API_KEY = 'K3733Q7LUM1W3AO0';\n      var StockSymbol = 'MSFT';\n      var API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\".concat(StockSymbol, \"&outputsize=compact&apikey=\").concat(API_KEY);\n      var stockChartXValuesFunction = [];\n      var stockChartYValuesFunction = [];\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n\n        for (var key in data['Time Series (Daily)']) {\n          stockChartXValuesFunction.push(key);\n          stockChartYValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\n        }\n\n        pointerToThis.setState({\n          stockChartXValues: stockChartXValuesFunction,\n          stockChartYValues: stockChartYValuesFunction\n        });\n      });\n    }\n  }, {\n    key: \"onBuyClick\",\n    value: function onBuyClick() {\n      //Total price printed on the console - try to store it in a variable\n      var TotlalPrice = console.log(this.state?.stockChartYValues[0] * document.getElementById(\"replyNumber\")?.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var CurrentPrice = this.state.stockChartYValues[0];\n      var TodayDate = this.state.stockChartXValues[0];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, \"MICROSOFT STOCK PRICE ANALYSIS\"), /*#__PURE__*/React.createElement(Plot, {\n        data: [{\n          x: this.state.stockChartXValues,\n          y: this.state.stockChartYValues,\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: {\n            color: 'orange'\n          }\n        }],\n        layout: {\n          width: 1240,\n          height: 400,\n          title: 'DAILY OPEN PRICE'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, \"Price on \", TodayDate, \" : $\", CurrentPrice), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"number\",\n        id: \"replyNumber\",\n        min: \"0\",\n        \"data-bind\": \"value:replyNumber\",\n        placeholder: \"QTY\",\n        defaultValue: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.onBuyClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }, \"BUY\")));\n    }\n  }]);\n\n  return StockPrice_MSFT;\n}(React.Component); // export const stockChartYValues = this.state.stockChartYValues[0];\n\n\nexport default StockPrice_MSFT;","map":{"version":3,"sources":["/home/thoubemanjaro/Desktop/Hitanshu/CryptoStocks/client/src/components/Stocks/StockPrice_MSFT.js"],"names":["React","Plot","StockPrice_MSFT","props","state","stockChartXValues","stockChartYValues","onBuyClick","bind","fetchStock","pointerToThis","console","log","API_KEY","StockSymbol","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","setState","TotlalPrice","document","getElementById","value","CurrentPrice","TodayDate","x","y","type","mode","marker","color","width","height","title","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Plot from 'react-plotly.js';\r\nimport './StocksPrice.css'\r\n\r\nclass StockPrice_MSFT extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockChartXValues: [],\r\n            stockChartYValues: [],\r\n        }\r\n        //Binding method\r\n        this.onBuyClick = this.onBuyClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchStock();\r\n    }\r\n\r\n    fetchStock() {\r\n        const pointerToThis = this;\r\n        console.log(pointerToThis);\r\n        const API_KEY = 'K3733Q7LUM1W3AO0';\r\n        let StockSymbol = 'MSFT'\r\n        let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${StockSymbol}&outputsize=compact&apikey=${API_KEY}`;\r\n        let stockChartXValuesFunction = [];\r\n        let stockChartYValuesFunction = [];\r\n\r\n        fetch(API_Call)\r\n            .then(\r\n                function(response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function(data) {\r\n                    console.log(data);\r\n\r\n                    for (var key in data['Time Series (Daily)']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(data['Time Series (Daily)'][key]['1. open']);\r\n                    }\r\n\r\n                    pointerToThis.setState({\r\n                        stockChartXValues: stockChartXValuesFunction,\r\n                        stockChartYValues: stockChartYValuesFunction\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    onBuyClick() {\r\n        //Total price printed on the console - try to store it in a variable\r\n        let TotlalPrice = console.log(this.state?.stockChartYValues[0]*document.getElementById(\"replyNumber\")?.value);\r\n    }\r\n\r\n    render () {\r\n        let CurrentPrice = this.state.stockChartYValues[0];\r\n        let TodayDate = this.state.stockChartXValues[0];\r\n        return (\r\n            <div className=\"container\">\r\n                <br></br>\r\n                <h1>MICROSOFT STOCK PRICE ANALYSIS</h1>\r\n                <Plot\r\n                    data={[\r\n                        {\r\n                            x: this.state.stockChartXValues,\r\n                            y: this.state.stockChartYValues,\r\n                            type: 'scatter',\r\n                            mode: 'lines+markers',\r\n                            marker: {color: 'orange'},\r\n                        },\r\n                    ]}\r\n                    layout={{width: 1240, height: 400, title: 'DAILY OPEN PRICE'}}\r\n                />\r\n                <h1>Price on {TodayDate} : ${CurrentPrice}</h1>\r\n                <div className=\"row\">\r\n                    <input type=\"number\" id=\"replyNumber\" min=\"0\" data-bind=\"value:replyNumber\" placeholder='QTY' defaultValue={0} />   \r\n                    <button className=\"btn btn-primary\" onClick={this.onBuyClick}>BUY</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// export const stockChartYValues = this.state.stockChartYValues[0];\r\n\r\nexport default StockPrice_MSFT;"]},"metadata":{},"sourceType":"module"}